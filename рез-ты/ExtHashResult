19:01:36: Executing ':org.example.ExtHashBenchmarkRunner.main()'...

Starting Gradle Daemon...
Gradle Daemon started in 545 ms
> Task :compileJava UP-TO-DATE
> Task :processResources NO-SOURCE
> Task :classes UP-TO-DATE

> Task :org.example.ExtHashBenchmarkRunner.main()
# JMH version: 1.37
# VM version: JDK 11.0.27, OpenJDK 64-Bit Server VM, 11.0.27+0
# VM invoker: /opt/homebrew/Cellar/openjdk@11/11.0.27/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.ExtHashBenchmark.insert10k

# Run progress: 0,00% complete, ETA 00:06:40
# Fork: 1 of 1
# Warmup Iteration   1: 8743,419 ms/op
# Warmup Iteration   2: 8468,023 ms/op
# Warmup Iteration   3: 8539,613 ms/op
Iteration   1: 8625,880 ms/op
Iteration   2: 8671,625 ms/op
Iteration   3: 8725,278 ms/op
Iteration   4: 8798,210 ms/op
Iteration   5: 8673,739 ms/op


Result "org.example.ExtHashBenchmark.insert10k":
  8698,946 ±(99.9%) 252,996 ms/op [Average]
  (min, avg, max) = (8625,880, 8698,946, 8798,210), stdev = 65,702
  CI (99.9%): [8445,951, 8951,942] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 11.0.27, OpenJDK 64-Bit Server VM, 11.0.27+0
# VM invoker: /opt/homebrew/Cellar/openjdk@11/11.0.27/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.ExtHashBenchmark.insertSaveLoad10k

# Run progress: 20,00% complete, ETA 00:09:14
# Fork: 1 of 1
# Warmup Iteration   1: 10796,280 ms/op
# Warmup Iteration   2: 10867,389 ms/op
# Warmup Iteration   3: 10655,006 ms/op
Iteration   1: 10842,363 ms/op
Iteration   2: 10714,248 ms/op
Iteration   3: 10887,218 ms/op
Iteration   4: 10522,815 ms/op
Iteration   5: 10599,128 ms/op


Result "org.example.ExtHashBenchmark.insertSaveLoad10k":
  10713,154 ±(99.9%) 597,238 ms/op [Average]
  (min, avg, max) = (10522,815, 10713,154, 10887,218), stdev = 155,101
  CI (99.9%): [10115,916, 11310,393] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 11.0.27, OpenJDK 64-Bit Server VM, 11.0.27+0
# VM invoker: /opt/homebrew/Cellar/openjdk@11/11.0.27/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.ExtHashBenchmark.insertThenRead10k

# Run progress: 40,00% complete, ETA 00:05:37
# Fork: 1 of 1
# Warmup Iteration   1: 8796,642 ms/op
# Warmup Iteration   2: 8823,012 ms/op
# Warmup Iteration   3: 8829,299 ms/op
Iteration   1: 8860,881 ms/op
Iteration   2: 8584,911 ms/op
Iteration   3: 9183,381 ms/op
Iteration   4: 8731,784 ms/op
Iteration   5: 8650,731 ms/op


Result "org.example.ExtHashBenchmark.insertThenRead10k":
  8802,338 ±(99.9%) 910,940 ms/op [Average]
  (min, avg, max) = (8584,911, 8802,338, 9183,381), stdev = 236,568
  CI (99.9%): [7891,398, 9713,278] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 11.0.27, OpenJDK 64-Bit Server VM, 11.0.27+0
# VM invoker: /opt/homebrew/Cellar/openjdk@11/11.0.27/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.ExtHashBenchmark.loadFromDisk10k

# Run progress: 60,00% complete, ETA 00:04:03
# Fork: 1 of 1
# Warmup Iteration   1: 2016,618 ms/op
# Warmup Iteration   2: 2058,864 ms/op
# Warmup Iteration   3: 2036,076 ms/op
Iteration   1: 2050,229 ms/op
Iteration   2: 2082,698 ms/op
Iteration   3: 2082,047 ms/op
Iteration   4: 2091,406 ms/op
Iteration   5: 2115,336 ms/op


Result "org.example.ExtHashBenchmark.loadFromDisk10k":
  2084,343 ±(99.9%) 89,939 ms/op [Average]
  (min, avg, max) = (2050,229, 2084,343, 2115,336), stdev = 23,357
  CI (99.9%): [1994,404, 2174,282] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 11.0.27, OpenJDK 64-Bit Server VM, 11.0.27+0
# VM invoker: /opt/homebrew/Cellar/openjdk@11/11.0.27/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.ExtHashBenchmark.saveReadyHash10k

# Run progress: 80,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 10,882 ms/op
# Warmup Iteration   2: 11,408 ms/op
# Warmup Iteration   3: 9,300 ms/op
Iteration   1: 10,651 ms/op
Iteration   2: 8,514 ms/op
Iteration   3: 8,896 ms/op
Iteration   4: 8,345 ms/op
Iteration   5: 8,491 ms/op


Result "org.example.ExtHashBenchmark.saveReadyHash10k":
  8,979 ±(99.9%) 3,683 ms/op [Average]
  (min, avg, max) = (8,345, 8,979, 10,651), stdev = 0,956
  CI (99.9%): [5,296, 12,662] (assumes normal distribution)


# Run complete. Total time: 00:11:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt      Score     Error  Units
ExtHashBenchmark.insert10k          avgt    5   8698,946 ± 252,996  ms/op
ExtHashBenchmark.insertSaveLoad10k  avgt    5  10713,154 ± 597,238  ms/op
ExtHashBenchmark.insertThenRead10k  avgt    5   8802,338 ± 910,940  ms/op
ExtHashBenchmark.loadFromDisk10k    avgt    5   2084,343 ±  89,939  ms/op
ExtHashBenchmark.saveReadyHash10k   avgt    5      8,979 ±   3,683  ms/op

BUILD SUCCESSFUL in 11m 8s
2 actionable tasks: 1 executed, 1 up-to-date
19:12:45: Execution finished ':org.example.ExtHashBenchmarkRunner.main()'.