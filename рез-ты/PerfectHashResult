19:27:39: Executing ':org.example.PerfectHashBenchmarkRunner.main()'...

> Task :compileJava UP-TO-DATE
> Task :processResources NO-SOURCE
> Task :classes UP-TO-DATE

> Task :org.example.PerfectHashBenchmarkRunner.main()
# JMH version: 1.37
# VM version: JDK 11.0.27, OpenJDK 64-Bit Server VM, 11.0.27+0
# VM invoker: /opt/homebrew/Cellar/openjdk@11/11.0.27/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.PerfectHashBenchmark.testBuildPerfectHashTable

# Run progress: 0,00% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 82,481 ms/op
# Warmup Iteration   2: 75,352 ms/op
# Warmup Iteration   3: 76,571 ms/op
# Warmup Iteration   4: 72,037 ms/op
# Warmup Iteration   5: 70,092 ms/op
Iteration   1: 67,419 ms/op
Iteration   2: 52,955 ms/op
Iteration   3: 51,605 ms/op
Iteration   4: 46,557 ms/op
Iteration   5: 46,665 ms/op


Result "org.example.PerfectHashBenchmark.testBuildPerfectHashTable":
  53,040 ±(99.9%) 32,872 ms/op [Average]
  (min, avg, max) = (46,557, 53,040, 67,419), stdev = 8,537
  CI (99.9%): [20,168, 85,912] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 11.0.27, OpenJDK 64-Bit Server VM, 11.0.27+0
# VM invoker: /opt/homebrew/Cellar/openjdk@11/11.0.27/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.PerfectHashBenchmark.testLookupKey

# Run progress: 50,00% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ms/op
# Warmup Iteration   2: ≈ 10⁻⁵ ms/op
# Warmup Iteration   3: ≈ 10⁻⁵ ms/op
# Warmup Iteration   4: ≈ 10⁻⁵ ms/op
# Warmup Iteration   5: ≈ 10⁻⁵ ms/op
Iteration   1: ≈ 10⁻⁵ ms/op
Iteration   2: ≈ 10⁻⁵ ms/op
Iteration   3: ≈ 10⁻⁵ ms/op
Iteration   4: ≈ 10⁻⁵ ms/op
Iteration   5: ≈ 10⁻⁵ ms/op


Result "org.example.PerfectHashBenchmark.testLookupKey":
  ≈ 10⁻⁵ ms/op


# Run complete. Total time: 00:03:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt   Score    Error  Units
PerfectHashBenchmark.testBuildPerfectHashTable  avgt    5  53,040 ± 32,872  ms/op
PerfectHashBenchmark.testLookupKey              avgt    5  ≈ 10⁻⁵           ms/op

BUILD SUCCESSFUL in 3m 21s
2 actionable tasks: 1 executed, 1 up-to-date
19:31:00: Execution finished ':org.example.PerfectHashBenchmarkRunner.main()'.
